// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.ufpb.dsc.cinephile.domain;

import br.ufpb.dsc.cinephile.domain.CategoryDataOnDemand;
import br.ufpb.dsc.cinephile.domain.Movie;
import br.ufpb.dsc.cinephile.domain.MovieDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MovieDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MovieDataOnDemand: @Component;
    
    private Random MovieDataOnDemand.rnd = new SecureRandom();
    
    private List<Movie> MovieDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand MovieDataOnDemand.categoryDataOnDemand;
    
    public Movie MovieDataOnDemand.getNewTransientMovie(int index) {
        Movie obj = new Movie();
        setBirthplace(obj, index);
        setCoverPicture(obj, index);
        setReleaseYear(obj, index);
        setSinopse(obj, index);
        setStockQuantity(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void MovieDataOnDemand.setBirthplace(Movie obj, int index) {
        String birthplace = "birthplace_" + index;
        obj.setBirthplace(birthplace);
    }
    
    public void MovieDataOnDemand.setCoverPicture(Movie obj, int index) {
        String coverPicture = "coverPicture_" + index;
        obj.setCoverPicture(coverPicture);
    }
    
    public void MovieDataOnDemand.setReleaseYear(Movie obj, int index) {
        Integer releaseYear = new Integer(index);
        obj.setReleaseYear(releaseYear);
    }
    
    public void MovieDataOnDemand.setSinopse(Movie obj, int index) {
        String sinopse = "sinopse_" + index;
        if (sinopse.length() > 5000) {
            sinopse = sinopse.substring(0, 5000);
        }
        obj.setSinopse(sinopse);
    }
    
    public void MovieDataOnDemand.setStockQuantity(Movie obj, int index) {
        Integer stockQuantity = new Integer(index);
        obj.setStockQuantity(stockQuantity);
    }
    
    public void MovieDataOnDemand.setTitle(Movie obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public Movie MovieDataOnDemand.getSpecificMovie(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Movie obj = data.get(index);
        Long id = obj.getId();
        return Movie.findMovie(id);
    }
    
    public Movie MovieDataOnDemand.getRandomMovie() {
        init();
        Movie obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Movie.findMovie(id);
    }
    
    public boolean MovieDataOnDemand.modifyMovie(Movie obj) {
        return false;
    }
    
    public void MovieDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Movie.findMovieEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Movie' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Movie>();
        for (int i = 0; i < 10; i++) {
            Movie obj = getNewTransientMovie(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
